(window.webpackJsonp=window.webpackJsonp||[]).push([[34,36],{2108:function(module,exports,__webpack_require__){eval("var api = __webpack_require__(262);\n            var content = __webpack_require__(2109);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMva2FtaWxnYWJyeWplbHNraS9wcm9qZWN0cy9zdXBlcnNldC11aS9wbHVnaW5zL2xlZ2FjeS1wbHVnaW4tY2hhcnQtbWFwLWJveC9zcmMvTWFwQm94LmNzcz82NDA3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3Bvc3Rjc3MhLi9NYXBCb3guY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2108\n")},2109:function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(263);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, "/**\\n * Licensed to the Apache Software Foundation (ASF) under one\\n * or more contributor license agreements.  See the NOTICE file\\n * distributed with this work for additional information\\n * regarding copyright ownership.  The ASF licenses this file\\n * to you under the Apache License, Version 2.0 (the\\n * \\"License\\"); you may not use this file except in compliance\\n * with the License.  You may obtain a copy of the License at\\n *\\n *   http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing,\\n * software distributed under the License is distributed on an\\n * \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n * KIND, either express or implied.  See the License for the\\n * specific language governing permissions and limitations\\n * under the License.\\n */\\n.mapbox .slice_container div {\\n  padding-top: 0px;\\n}\\n", ""]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMva2FtaWxnYWJyeWplbHNraS9wcm9qZWN0cy9zdXBlcnNldC11aS9wbHVnaW5zL2xlZ2FjeS1wbHVnaW4tY2hhcnQtbWFwLWJveC9zcmMvTWFwQm94LmNzcz8yYzIyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKipcXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXFxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXFxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXFxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxcbiAqIFxcXCJMaWNlbnNlXFxcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XFxuICpcXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxcbiAqXFxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXFxuICogXFxcIkFTIElTXFxcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXFxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXFxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxcbiAqL1xcbi5tYXBib3ggLnNsaWNlX2NvbnRhaW5lciBkaXYge1xcbiAgcGFkZGluZy10b3A6IDBweDtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2109\n')},2226:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "DEFAULT_MAX_ZOOM", function() { return /* binding */ DEFAULT_MAX_ZOOM; });\n__webpack_require__.d(__webpack_exports__, "DEFAULT_POINT_RADIUS", function() { return /* binding */ DEFAULT_POINT_RADIUS; });\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/core-js/modules/es.object.assign.js\nvar es_object_assign = __webpack_require__(48);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/react/index.js\nvar react = __webpack_require__(2);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(17);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/react-map-gl/dist/esm/index.js + 72 modules\nvar esm = __webpack_require__(2093);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/immutable/dist/immutable.js\nvar immutable = __webpack_require__(1932);\nvar immutable_default = /*#__PURE__*/__webpack_require__.n(immutable);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/viewport-mercator-project/dist/esm/web-mercator-viewport.js + 10 modules\nvar web_mercator_viewport = __webpack_require__(2430);\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/core-js/modules/web.dom-collections.iterator.js\nvar web_dom_collections_iterator = __webpack_require__(47);\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/utils/roundDecimal.js\nfunction roundDecimal(number,precision){let roundedNumber,p=precision;if(precision){roundedNumber=Math.round(number*(p=10**p))/p}else{roundedNumber=Math.round(number)}return roundedNumber}\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/utils/geo.js\nconst EARTH_CIRCUMFERENCE_KM=40075.16;const MILES_PER_KM=1.60934;function kmToPixels(kilometers,latitude,zoomLevel){// Algorithm from: http://wiki.openstreetmap.org/wiki/Zoom_levels\nconst latitudeRad=latitude*(Math.PI/180),kmPerPixel=EARTH_CIRCUMFERENCE_KM*Math.cos(latitudeRad)/2**(zoomLevel+9);// Seems like the zoomLevel is off by one\nreturn roundDecimal(kilometers/kmPerPixel,2)}\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/utils/luminanceFromRGB.js\nconst LUMINANCE_RED_WEIGHT=.2126;const LUMINANCE_GREEN_WEIGHT=.7152;const LUMINANCE_BLUE_WEIGHT=.0722;function luminanceFromRGB(r,g,b){// Formula: https://en.wikipedia.org/wiki/Relative_luminance\nreturn LUMINANCE_RED_WEIGHT*r+LUMINANCE_GREEN_WEIGHT*g+LUMINANCE_BLUE_WEIGHT*b}\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/node_modules/mapbox-gl/dist/mapbox-gl.css\nvar mapbox_gl = __webpack_require__(2165);\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/ScatterPlotGlowOverlay.jsx\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */ /* eslint-disable react/require-default-props */const propTypes={aggregation:prop_types_default.a.string,compositeOperation:prop_types_default.a.string,dotRadius:prop_types_default.a.number,lngLatAccessor:prop_types_default.a.func,locations:prop_types_default.a.instanceOf(immutable_default.a.List).isRequired,pointRadiusUnit:prop_types_default.a.string,renderWhileDragging:prop_types_default.a.bool,rgb:prop_types_default.a.arrayOf(prop_types_default.a.oneOfType([prop_types_default.a.string,prop_types_default.a.number])),zoom:prop_types_default.a.number},defaultProps={// Same as browser default.\ncompositeOperation:"source-over",dotRadius:4,lngLatAccessor:location=>[location.get(0),location.get(1)],renderWhileDragging:!0},computeClusterLabel=(properties,aggregation)=>{const count=properties.get("point_count");if(!aggregation){return count}if("sum"===aggregation||"min"===aggregation||"max"===aggregation){return properties.get(aggregation)}const sum=properties.get("sum");if("mean"===aggregation){return Math.round(100*(sum/count))/100}const squaredSum=properties.get("squaredSum"),variance=squaredSum/count-(sum/count)**2;if("var"===aggregation){return Math.round(100*variance)/100}if("stdev"===aggregation){return Math.round(100*Math.sqrt(variance))/100}// fallback to point_count, this really shouldn\'t happen\nreturn count};class ScatterPlotGlowOverlay_ScatterPlotGlowOverlay extends react_default.a.PureComponent{constructor(props){super(props);this.redraw=this.redraw.bind(this)}drawText(ctx,pixel,options={}){const{fontHeight=0,label="",radius=0,rgb=[0,0,0],shadow=!1}=options,maxWidth=1.8*radius,luminance=luminanceFromRGB(rgb[1],rgb[2],rgb[3]);ctx.globalCompositeOperation="source-over";ctx.fillStyle=luminance<=110?"white":"black";ctx.font="".concat(fontHeight,"px sans-serif");ctx.textAlign="center";ctx.textBaseline="middle";if(shadow){ctx.shadowBlur=15;ctx.shadowColor=luminance<=110?"black":""}const textWidth=ctx.measureText(label).width;if(textWidth>maxWidth){ctx.font="".concat(fontHeight/textWidth*maxWidth,"px sans-serif")}const{compositeOperation}=this.props;ctx.fillText(label,pixel[0],pixel[1]);ctx.globalCompositeOperation=compositeOperation;ctx.shadowBlur=0;ctx.shadowColor=""}// Modified: https://github.com/uber/react-map-gl/blob/master/overlays/scatterplot.react.js\nredraw({width,height,ctx,isDragging,project}){const{aggregation,compositeOperation,dotRadius,lngLatAccessor,locations,pointRadiusUnit,renderWhileDragging,rgb,zoom}=this.props,radius=dotRadius,clusterLabelMap=[];locations.forEach((location,i)=>{if(location.get("properties").get("cluster")){clusterLabelMap[i]=computeClusterLabel(location.get("properties"),aggregation)}},this);const maxLabel=Math.max(...clusterLabelMap.filter(v=>!Number.isNaN(v)));ctx.clearRect(0,0,width,height);ctx.globalCompositeOperation=compositeOperation;if((renderWhileDragging||!isDragging)&&locations){locations.forEach(function(location,i){const pixel=project(lngLatAccessor(location)),pixelRounded=[roundDecimal(pixel[0],1),roundDecimal(pixel[1],1)];if(0<=pixelRounded[0]+radius&&pixelRounded[0]-radius<width&&0<=pixelRounded[1]+radius&&pixelRounded[1]-radius<height){ctx.beginPath();if(location.get("properties").get("cluster")){let clusterLabel=clusterLabelMap[i];const scaledRadius=roundDecimal((clusterLabel/maxLabel)**.5*radius,1),fontHeight=roundDecimal(.5*scaledRadius,1),[x,y]=pixelRounded,gradient=ctx.createRadialGradient(x,y,scaledRadius,x,y,0);gradient.addColorStop(1,"rgba(".concat(rgb[1],", ").concat(rgb[2],", ").concat(rgb[3],", 0.8)"));gradient.addColorStop(0,"rgba(".concat(rgb[1],", ").concat(rgb[2],", ").concat(rgb[3],", 0)"));ctx.arc(pixelRounded[0],pixelRounded[1],scaledRadius,0,2*Math.PI);ctx.fillStyle=gradient;ctx.fill();if(Number.isFinite(parseFloat(clusterLabel))){if(1e4<=clusterLabel){clusterLabel="".concat(Math.round(clusterLabel/1e3),"k")}else if(1e3<=clusterLabel){clusterLabel="".concat(Math.round(clusterLabel/100)/10,"k")}this.drawText(ctx,pixelRounded,{fontHeight,label:clusterLabel,radius:scaledRadius,rgb,shadow:!0})}}else{const defaultRadius=radius/6,radiusProperty=location.get("properties").get("radius"),pointMetric=location.get("properties").get("metric");let pointRadius=null===radiusProperty?defaultRadius:radiusProperty,pointLabel;if(null!==radiusProperty){const pointLatitude=lngLatAccessor(location)[1];if("Kilometers"===pointRadiusUnit){pointLabel="".concat(roundDecimal(pointRadius,2),"km");pointRadius=kmToPixels(pointRadius,pointLatitude,zoom)}else if("Miles"===pointRadiusUnit){pointLabel="".concat(roundDecimal(pointRadius,2),"mi");pointRadius=kmToPixels(pointRadius*MILES_PER_KM,pointLatitude,zoom)}}if(null!==pointMetric){pointLabel=Number.isFinite(parseFloat(pointMetric))?roundDecimal(pointMetric,2):pointMetric}// Fall back to default points if pointRadius wasn\'t a numerical column\nif(!pointRadius){pointRadius=defaultRadius}ctx.arc(pixelRounded[0],pixelRounded[1],roundDecimal(pointRadius,1),0,2*Math.PI);ctx.fillStyle="rgb(".concat(rgb[1],", ").concat(rgb[2],", ").concat(rgb[3],")");ctx.fill();if(pointLabel!==void 0){this.drawText(ctx,pixelRounded,{fontHeight:roundDecimal(pointRadius,1),label:pointLabel,radius:pointRadius,rgb,shadow:!1})}}}},this)}}render(){return/*#__PURE__*/react_default.a.createElement(esm["a" /* CanvasOverlay */],{redraw:this.redraw})}}ScatterPlotGlowOverlay_ScatterPlotGlowOverlay.displayName="ScatterPlotGlowOverlay";ScatterPlotGlowOverlay_ScatterPlotGlowOverlay.propTypes=propTypes;ScatterPlotGlowOverlay_ScatterPlotGlowOverlay.defaultProps=defaultProps;ScatterPlotGlowOverlay_ScatterPlotGlowOverlay.__docgenInfo={description:"",methods:[{name:"drawText",docblock:null,modifiers:[],params:[{name:"ctx",type:null},{name:"pixel",type:null},{name:"options",type:null}],returns:null},{name:"redraw",docblock:null,modifiers:[],params:[{name:"{ width, height, ctx, isDragging, project }",type:null}],returns:null}],displayName:"ScatterPlotGlowOverlay",props:{compositeOperation:{defaultValue:{value:"\'source-over\'",computed:!1},type:{name:"string"},required:!1,description:""},dotRadius:{defaultValue:{value:"4",computed:!1},type:{name:"number"},required:!1,description:""},lngLatAccessor:{defaultValue:{value:"location => [location.get(0), location.get(1)]",computed:!1},type:{name:"func"},required:!1,description:""},renderWhileDragging:{defaultValue:{value:"true",computed:!1},type:{name:"bool"},required:!1,description:""},aggregation:{type:{name:"string"},required:!1,description:""},locations:{type:{name:"instanceOf",value:"Immutable.List"},required:!0,description:""},pointRadiusUnit:{type:{name:"string"},required:!1,description:""},rgb:{type:{name:"arrayOf",value:{name:"union",value:[{name:"string"},{name:"number"}]}},required:!1,description:""},zoom:{type:{name:"number"},required:!1,description:""}}};/* harmony default export */ var src_ScatterPlotGlowOverlay = (ScatterPlotGlowOverlay_ScatterPlotGlowOverlay);if("undefined"!=typeof STORYBOOK_REACT_CLASSES){STORYBOOK_REACT_CLASSES["../../plugins/legacy-plugin-chart-map-box/src/ScatterPlotGlowOverlay.jsx"]={name:"ScatterPlotGlowOverlay",docgenInfo:ScatterPlotGlowOverlay_ScatterPlotGlowOverlay.__docgenInfo,path:"../../plugins/legacy-plugin-chart-map-box/src/ScatterPlotGlowOverlay.jsx"}}\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/MapBox.css\nvar src_MapBox = __webpack_require__(2108);\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/MapBox.jsx\nfunction _extends(){_extends=Object.assign||function(target){for(var i=1,source;i<arguments.length;i++){source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * "License"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */ /* eslint-disable react/jsx-sort-default-props, react/sort-prop-types */ /* eslint-disable react/forbid-prop-types, react/require-default-props */const NOOP=()=>{};const DEFAULT_MAX_ZOOM=16;const DEFAULT_POINT_RADIUS=60;const MapBox_propTypes={width:prop_types_default.a.number,height:prop_types_default.a.number,aggregatorName:prop_types_default.a.string,clusterer:prop_types_default.a.object,globalOpacity:prop_types_default.a.number,hasCustomMetric:prop_types_default.a.bool,mapStyle:prop_types_default.a.string,mapboxApiKey:prop_types_default.a.string.isRequired,onViewportChange:prop_types_default.a.func,pointRadius:prop_types_default.a.number,pointRadiusUnit:prop_types_default.a.string,renderWhileDragging:prop_types_default.a.bool,rgb:prop_types_default.a.array,bounds:prop_types_default.a.array},MapBox_defaultProps={width:400,height:400,globalOpacity:1,onViewportChange:NOOP,pointRadius:60,pointRadiusUnit:"Pixels"};class MapBox_MapBox extends react_default.a.Component{constructor(props){super(props);const{width,height,bounds}=this.props,mercator=new web_mercator_viewport["a" /* default */]({width,height}).fitBounds(bounds),{latitude,longitude,zoom}=mercator;// Get a viewport that fits the given bounds, which all marks to be clustered.\n// Derive lat, lon and zoom from this viewport. This is only done on initial\n// render as the bounds don\'t update as we pan/zoom in the current design.\nthis.state={viewport:{longitude,latitude,zoom}};this.handleViewportChange=this.handleViewportChange.bind(this)}handleViewportChange(viewport){this.setState({viewport});const{onViewportChange}=this.props;onViewportChange(viewport)}render(){const{width,height,aggregatorName,clusterer,globalOpacity,mapStyle,mapboxApiKey,pointRadius,pointRadiusUnit,renderWhileDragging,rgb,hasCustomMetric,bounds}=this.props,{viewport}=this.state,isDragging=viewport.isDragging===void 0?!1:viewport.isDragging,bbox=[bounds[0][0],bounds[0][1],bounds[1][0],bounds[1][1]],clusters=clusterer.getClusters(bbox,Math.round(viewport.zoom));return/*#__PURE__*/react_default.a.createElement(esm["b" /* default */],_extends({},viewport,{mapStyle:mapStyle,width:width,height:height,mapboxApiAccessToken:mapboxApiKey,onViewportChange:this.handleViewportChange}),/*#__PURE__*/react_default.a.createElement(src_ScatterPlotGlowOverlay,_extends({},viewport,{isDragging:isDragging,locations:immutable_default.a.fromJS(clusters),dotRadius:pointRadius,pointRadiusUnit:pointRadiusUnit,rgb:rgb,globalOpacity:globalOpacity,compositeOperation:"screen",renderWhileDragging:renderWhileDragging,aggregation:hasCustomMetric?aggregatorName:null,lngLatAccessor:location=>{const coordinates=location.get("geometry").get("coordinates");return[coordinates.get(0),coordinates.get(1)]}})))}}MapBox_MapBox.displayName="MapBox";MapBox_MapBox.propTypes=MapBox_propTypes;MapBox_MapBox.defaultProps=MapBox_defaultProps;MapBox_MapBox.__docgenInfo={description:"",methods:[{name:"handleViewportChange",docblock:null,modifiers:[],params:[{name:"viewport",type:null}],returns:null}],displayName:"MapBox",props:{width:{defaultValue:{value:"400",computed:!1},type:{name:"number"},required:!1,description:""},height:{defaultValue:{value:"400",computed:!1},type:{name:"number"},required:!1,description:""},globalOpacity:{defaultValue:{value:"1",computed:!1},type:{name:"number"},required:!1,description:""},onViewportChange:{defaultValue:{value:"() => {}",computed:!1},type:{name:"func"},required:!1,description:""},pointRadius:{defaultValue:{value:"60",computed:!1},type:{name:"number"},required:!1,description:""},pointRadiusUnit:{defaultValue:{value:"\'Pixels\'",computed:!1},type:{name:"string"},required:!1,description:""},aggregatorName:{type:{name:"string"},required:!1,description:""},clusterer:{type:{name:"object"},required:!1,description:""},hasCustomMetric:{type:{name:"bool"},required:!1,description:""},mapStyle:{type:{name:"string"},required:!1,description:""},mapboxApiKey:{type:{name:"string"},required:!0,description:""},renderWhileDragging:{type:{name:"bool"},required:!1,description:""},rgb:{type:{name:"array"},required:!1,description:""},bounds:{type:{name:"array"},required:!1,description:""}}};/* harmony default export */ var legacy_plugin_chart_map_box_src_MapBox = __webpack_exports__["default"] = (MapBox_MapBox);if("undefined"!=typeof STORYBOOK_REACT_CLASSES){STORYBOOK_REACT_CLASSES["../../plugins/legacy-plugin-chart-map-box/src/MapBox.jsx"]={name:"MapBox",docgenInfo:MapBox_MapBox.__docgenInfo,path:"../../plugins/legacy-plugin-chart-map-box/src/MapBox.jsx"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2226\n')},2491:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"default\", function() { return /* binding */ transformProps; });\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/node_modules/kdbush/src/sort.js\n\nfunction sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) return;\n\n    var m = Math.floor((left + right) / 2);\n\n    sort_select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction sort_select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            sort_select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        var t = coords[2 * k + inc];\n        var i = left;\n        var j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) swapItem(ids, coords, left, right);\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) i++;\n            while (coords[2 * j + inc] > t) j--;\n        }\n\n        if (coords[2 * left + inc] === t) swapItem(ids, coords, left, j);\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/node_modules/kdbush/src/range.js\n\nfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var x, y;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) result.push(ids[m]);\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/node_modules/kdbush/src/within.js\n\nfunction within(ids, coords, qx, qy, r, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var r2 = r * r;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) result.push(ids[i]);\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        var x = coords[2 * m];\n        var y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) result.push(ids[m]);\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/node_modules/kdbush/src/index.js\n\n\n\n\n\nfunction kdbush(points, getX, getY, nodeSize, ArrayType) {\n    return new KDBush(points, getX, getY, nodeSize, ArrayType);\n}\n\nfunction KDBush(points, getX, getY, nodeSize, ArrayType) {\n    getX = getX || defaultGetX;\n    getY = getY || defaultGetY;\n    ArrayType = ArrayType || Array;\n\n    this.nodeSize = nodeSize || 64;\n    this.points = points;\n\n    this.ids = new ArrayType(points.length);\n    this.coords = new ArrayType(points.length * 2);\n\n    for (var i = 0; i < points.length; i++) {\n        this.ids[i] = i;\n        this.coords[2 * i] = getX(points[i]);\n        this.coords[2 * i + 1] = getY(points[i]);\n    }\n\n    sortKD(this.ids, this.coords, this.nodeSize, 0, this.ids.length - 1, 0);\n}\n\nKDBush.prototype = {\n    range: function (minX, minY, maxX, maxY) {\n        return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n    },\n\n    within: function (x, y, r) {\n        return within(this.ids, this.coords, x, y, r, this.nodeSize);\n    }\n};\n\nfunction defaultGetX(p) { return p[0]; }\nfunction defaultGetY(p) { return p[1]; }\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/node_modules/supercluster/index.js\n\n\n\nfunction supercluster(options) {\n    return new SuperCluster(options);\n}\n\nfunction SuperCluster(options) {\n    this.options = extend(Object.create(this.options), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n}\n\nSuperCluster.prototype = {\n    options: {\n        minZoom: 0,   // min zoom to generate clusters on\n        maxZoom: 16,  // max zoom level to cluster the points on\n        radius: 40,   // cluster radius in pixels\n        extent: 512,  // tile extent (radius is calculated relative to it)\n        nodeSize: 64, // size of the KD-tree leaf node, affects performance\n        log: false,   // whether to log timing info\n\n        // a reduce function for calculating custom cluster properties\n        reduce: null, // function (accumulated, props) { accumulated.sum += props.sum; }\n\n        // initial properties of a cluster (before running the reducer)\n        initial: function () { return {}; }, // function () { return {sum: 0}; },\n\n        // properties to use for individual points when running the reducer\n        map: function (props) { return props; } // function (props) { return {sum: props.my_value}; },\n    },\n\n    load: function (points) {\n        var log = this.options.log;\n\n        if (log) console.time('total time');\n\n        var timerId = 'prepare ' + points.length + ' points';\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        var clusters = [];\n        for (var i = 0; i < points.length; i++) {\n            if (!points[i].geometry) {\n                continue;\n            }\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[this.options.maxZoom + 1] = kdbush(clusters, supercluster_getX, supercluster_getY, this.options.nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (var z = this.options.maxZoom; z >= this.options.minZoom; z--) {\n            var now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = kdbush(clusters, supercluster_getX, supercluster_getY, this.options.nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    },\n\n    getClusters: function (bbox, zoom) {\n        var minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        var minLat = Math.max(-90, Math.min(90, bbox[1]));\n        var maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        var maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            var easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            var westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        var tree = this.trees[this._limitZoom(zoom)];\n        var ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        var clusters = [];\n        for (var i = 0; i < ids.length; i++) {\n            var c = tree.points[ids[i]];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    },\n\n    getChildren: function (clusterId) {\n        var originId = clusterId >> 5;\n        var originZoom = clusterId % 32;\n        var errorMsg = 'No cluster with the specified id.';\n\n        var index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        var origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        var r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        var ids = index.within(origin.x, origin.y, r);\n        var children = [];\n        for (var i = 0; i < ids.length; i++) {\n            var c = index.points[ids[i]];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    },\n\n    getLeaves: function (clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        var leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    },\n\n    getTile: function (z, x, y) {\n        var tree = this.trees[this._limitZoom(z)];\n        var z2 = Math.pow(2, z);\n        var extent = this.options.extent;\n        var r = this.options.radius;\n        var p = r / extent;\n        var top = (y - p) / z2;\n        var bottom = (y + 1 + p) / z2;\n\n        var tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    },\n\n    getClusterExpansionZoom: function (clusterId) {\n        var clusterZoom = (clusterId % 32) - 1;\n        while (clusterZoom < this.options.maxZoom) {\n            var children = this.getChildren(clusterId);\n            clusterZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return clusterZoom;\n    },\n\n    _appendLeaves: function (result, clusterId, limit, offset, skipped) {\n        var children = this.getChildren(clusterId);\n\n        for (var i = 0; i < children.length; i++) {\n            var props = children[i].properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(children[i]);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    },\n\n    _addTileFeatures: function (ids, points, x, y, z2, tile) {\n        for (var i = 0; i < ids.length; i++) {\n            var c = points[ids[i]];\n            var f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (c.x * z2 - x)),\n                    Math.round(this.options.extent * (c.y * z2 - y))\n                ]],\n                tags: c.numPoints ? getClusterProperties(c) : this.points[c.index].properties\n            };\n            var id = c.numPoints ? c.id : this.points[c.index].id;\n            if (id !== undefined) {\n                f.id = id;\n            }\n            tile.features.push(f);\n        }\n    },\n\n    _limitZoom: function (z) {\n        return Math.max(this.options.minZoom, Math.min(z, this.options.maxZoom + 1));\n    },\n\n    _cluster: function (points, zoom) {\n        var clusters = [];\n        var r = this.options.radius / (this.options.extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (var i = 0; i < points.length; i++) {\n            var p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            var tree = this.trees[zoom + 1];\n            var neighborIds = tree.within(p.x, p.y, r);\n\n            var numPoints = p.numPoints || 1;\n            var wx = p.x * numPoints;\n            var wy = p.y * numPoints;\n\n            var clusterProperties = null;\n\n            if (this.options.reduce) {\n                clusterProperties = this.options.initial();\n                this._accumulate(clusterProperties, p);\n            }\n\n            // encode both zoom and point index on which the cluster originated\n            var id = (i << 5) + (zoom + 1);\n\n            for (var j = 0; j < neighborIds.length; j++) {\n                var b = tree.points[neighborIds[j]];\n                // filter out neighbors that are already processed\n                if (b.zoom <= zoom) continue;\n                b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                var numPoints2 = b.numPoints || 1;\n                wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                wy += b.y * numPoints2;\n\n                numPoints += numPoints2;\n                b.parentId = id;\n\n                if (this.options.reduce) {\n                    this._accumulate(clusterProperties, b);\n                }\n            }\n\n            if (numPoints === 1) {\n                clusters.push(p);\n            } else {\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n            }\n        }\n\n        return clusters;\n    },\n\n    _accumulate: function (clusterProperties, point) {\n        var properties = point.numPoints ?\n            point.properties :\n            this.options.map(this.points[point.index].properties);\n\n        this.options.reduce(clusterProperties, properties);\n    }\n};\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: x, // weighted cluster center\n        y: y,\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id: id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints: numPoints,\n        properties: properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    var coords = p.geometry.coordinates;\n    return {\n        x: lngX(coords[0]), // projected point coordinates\n        y: latY(coords[1]),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    var count = cluster.numPoints;\n    var abbrev =\n        count >= 10000 ? Math.round(count / 1000) + 'k' :\n        count >= 1000 ? (Math.round(count / 100) / 10) + 'k' : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    var sin = Math.sin(lat * Math.PI / 180),\n        y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    var y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (var id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction supercluster_getX(p) {\n    return p.x;\n}\nfunction supercluster_getY(p) {\n    return p.y;\n}\n\n// EXTERNAL MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/MapBox.jsx + 4 modules\nvar MapBox = __webpack_require__(2226);\n\n// CONCATENATED MODULE: /Users/kamilgabryjelski/projects/superset-ui/plugins/legacy-plugin-chart-map-box/src/transformProps.js\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */const NOOP=()=>{};function transformProps(chartProps){const{width,height,formData,hooks,queryData}=chartProps,{onError=NOOP,setControlValue=NOOP}=hooks,{bounds,geoJSON,hasCustomMetric,mapboxApiKey}=queryData.data,{clusteringRadius,globalOpacity,mapboxColor,mapboxStyle,pandasAggfunc,pointRadius,pointRadiusUnit,renderWhileDragging}=formData,rgb=/^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/.exec(mapboxColor);if(null===rgb){onError(\"Color field must be of form 'rgb(%d, %d, %d)'\");return{}}const opts={maxZoom:MapBox[\"DEFAULT_MAX_ZOOM\"],radius:clusteringRadius};if(hasCustomMetric){opts.initial=()=>({sum:0,squaredSum:0,min:1/0,max:-Infinity});opts.map=prop=>({sum:prop.metric,squaredSum:prop.metric**2,min:prop.metric,max:prop.metric});opts.reduce=(accu,prop)=>{// Temporarily disable param-reassignment linting to work with supercluster's api\n/* eslint-disable no-param-reassign */accu.sum+=prop.sum;accu.squaredSum+=prop.squaredSum;accu.min=Math.min(accu.min,prop.min);accu.max=Math.max(accu.max,prop.max);/* eslint-enable no-param-reassign */}}const clusterer=supercluster(opts);clusterer.load(geoJSON.features);return{width,height,aggregatorName:pandasAggfunc,bounds,clusterer,globalOpacity,hasCustomMetric,mapboxApiKey,mapStyle:mapboxStyle,onViewportChange({latitude,longitude,zoom}){setControlValue(\"viewport_longitude\",longitude);setControlValue(\"viewport_latitude\",latitude);setControlValue(\"viewport_zoom\",zoom)},pointRadius:\"Auto\"===pointRadius?MapBox[\"DEFAULT_POINT_RADIUS\"]:pointRadius,pointRadiusUnit,renderWhileDragging,rgb}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2491\n")}}]);